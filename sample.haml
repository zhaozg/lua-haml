- local title = "Lua Haml: Currently Supported Language"
!!! XML
!!!
- local locals = {}
%html(xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en")
  %head
    %title= title
    %meta(http-equiv="Content-Type" content="text/html; charset=utf-8")
    :css
      body { background-color: #0ff }
      h1 { font-size: 25px; }
      textarea { font-family: monaco, fixed; font-size: 14px; }
  %body
    %h1= title
    %p
      This file demonstrates most of Lua Haml's features.
    %p
      If you're viewing the output and wondering what's so interesting, then
      you should probably be looking at the Haml source instead.
    #content
      - local greetings = {en = "hello world!", es = "¡hola mundo!", pt = "olá mundo!"}
      %ul#greetings.multilingual
        - for lang, greeting in pairs(greetings) do
          %li.greeting(class=lang)= greeting
    %p
      &= "<'\"escaped & escaped\"'>"
      != "<'\"NOT escaped & escaped\"'>"
      = "<'\"MAYBE escaped & escaped\"'> (depending on runtime options)"
    #escaped_content
      \#this content is escaped
    #stuff
      This is nested tag content.
    -# This is a comment, which is here to explain that since Lua has no native string interpolation,
    -# the feature is emulated in Lua Haml. In order to make a variable available for string interpolation,
    -# you have to assign it to the "locals" table. Then you can interpolate variables inside content and
    -# filters, which can be useful, for example, to generate Javascript:
    - locals.greetings = greetings
    :javascript
      //alert("#{greetings.pt}");
    %p= "#{greetings.en}"
    %p #{greetings.en}
    #more_stuff
      %textarea(cols="100" rows="17")
        :preserve

                ___           ___           ___           ___
               /\__\         /\  \         /\__\         /\__\
              /:/  /        /::\  \       /::|  |       /:/  /
             /:/__/        /:/\:\  \     /:|:|  |      /:/  /
            /::\  \ ___   /::\~\:\  \   /:/|:|__|__   /:/  /
           /:/\:\  /\__\ /:/\:\ \:\__\ /:/ |::::\__\ /:/__/
           \/__\:\/:/  / \/__\:\/:/  / \/__/~~/:/  / \:\  \
                \::/  /       \::/  /        /:/  /   \:\  \
                /:/  /        /:/  /        /:/  /     \:\  \
               /:/  /        /:/  /        /:/  /       \:\__\
               \/__/         \/__/         \/__/         \/__/

               Many
                             thanks
                     to
                                          http://www.network-science.de/ascii
  #more_stuff(type="multline-content")
    %p= 1 + |
        2 + |
        3 + |
        4   |
  #more_more_stuff
    :plain
      <p>
        <a href="http://validator.w3.org/check?uri=referer"><img src="http://www.w3.org/Icons/valid-xhtml10-blue"
          alt="Valid XHTML 1.0 Transitional" height="31" width="88" /></a>
      </p>